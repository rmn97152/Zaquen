-*- mode: org -*-
#+title: Assignment 03 Key
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]

* Convert Infix to Prefix
#+begin_src elisp :results silent
  (defun handle-unary-minus (exp)
    (if (symbolp exp)
        (let* ((name (symbol-name exp))
               (minus (= (elt name 0) ?-)))
          (if minus
              (list '- (intern (substring name 1)))
            exp))
      exp))
#+end_src

#+begin_src elisp :results silent
  (defun infix-to-prefix (exp)
    (pcase exp
      ((pred atom) (handle-unary-minus exp))
      (`(,a ,op ,b) `(,op ,(infix-to-prefix `,a) ,(infix-to-prefix `,b)))
      (`(,a ,op ,b ,op ,c) `(,op ,(infix-to-prefix `,a) ,(infix-to-prefix `,b) ,(infix-to-prefix `,c)))
      (`(,a ,op ,fn ,b) `(,op ,(infix-to-prefix `,a) (,fn ,(infix-to-prefix `,b))))
      (x exp)))
#+end_src

  Then *without using* =defun= set the =quadratic-formula= symbol\rsquo{}s function to be the
  converted expression.

  In other words, start with:
#+begin_src elisp
  (setq infix-quadratic-formula '((-b + sqrt((b * b) - (4 * a * c))) / (2 * a)))
#+end_src

  And end with the moral equivalent of executing the following block:
#+begin_src elisp :results silent
  (defun quadratic-formula (a b c)
    (/ (+ (- b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a)))
#+end_src

  Such that you can get the answer:
#+begin_src elisp :results raw
  (quadratic-formula 1 -1 -1)
#+end_src

#+results:
1.618033988749895

#+begin_src elisp :results raw
  (infix-to-prefix infix-quadratic-formula)
#+end_src

#+results:
(/ (+ (- b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a))

#+begin_src elisp :results silent
  (fset 'quadratic-formula (list 'lambda '(a b c) (infix-to-prefix infix-quadratic-formula)))
#+end_src

  An alternate way that assumes too much and doesn\rsquo{}t use =pcase=.
#+begin_src elisp :results silent
  (defun infix-to-prefix (exp)
    (cond ((null exp) nil)
          ((atom exp) (handle-unary-minus exp))
          ((= 3 (length exp))
           (cons (second exp)
                 (list (infix-to-prefix (first exp))
                       (infix-to-prefix (third exp)))))
          ((= 4 (length exp))
           (if (eq (third exp) 'sqrt)
               (cons (second exp)
                     (list (infix-to-prefix (first exp))
                           (list 'sqrt
                                 (infix-to-prefix (fourth exp)))))))
          ((= 5 (length exp))
           (if (and (eq (second exp) '*) (eq (second exp) (fourth exp)))
               (cons (second exp)
                 (list (infix-to-prefix (first exp))
                       (infix-to-prefix (third exp))
                       (infix-to-prefix (fifth exp))))))
          (t exp)))
#+end_src

#+begin_src elisp :results raw
  (infix-to-prefix infix-quadratic-formula)
#+end_src

#+results:
(/ (+ (- b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a))

* Invert
#+begin_src elisp :results silent
  (defun f (m n)
    (let ((x (+ m n)))
      (+ (/ (* (- x 2) (- x 1)) 2) m)))

  (defun invert (y)
    (let* ((x (- (ceiling (/ (+ (sqrt (+ (* 8 y) 1)) 3) 2)) 1))
           (m (- y (/ (* (- x 2) (- x 1)) 2)))
           (n (- x m)))
      (cons m n)))
#+end_src

#+begin_src elisp
  (loop for m from 1 to 20
        append (loop for n from 1 to 20
                     collect (list m n (f m n) (invert (f m n)))))
#+end_src

#+begin_src elisp
  (f 2 6)
#+end_src

#+RESULTS:
: 23

* Help With Code

  \[C^{+}_{2}(x, y) = \sum_{i = 0}^{x} i + \sum_{j = x + 2}^{y + 2} j\]
#+begin_src elisp :results silent
  (defun cantor-two-to-one (x y)
    (+ (loop for i from 0 to x sum i)
       (loop for j from (+ x 2) to (+ y 2) sum j)))
#+end_src

#+begin_src elisp :results value
  (loop for x from 0 to 10
        collect (loop for y from 0 to 10
                      collect (list x y (cantor-two-to-one x y))))
#+end_src

#+results:
| (0 0 2)   | (0 1 5)   | (0 2 9)   | (0 3 14)  | (0 4 20)  | (0 5 27)  | (0 6 35)  | (0 7 44)  | (0 8 54)  | (0 9 65)  | (0 10 77)  |
| (1 0 1)   | (1 1 4)   | (1 2 8)   | (1 3 13)  | (1 4 19)  | (1 5 26)  | (1 6 34)  | (1 7 43)  | (1 8 53)  | (1 9 64)  | (1 10 76)  |
| (2 0 3)   | (2 1 3)   | (2 2 7)   | (2 3 12)  | (2 4 18)  | (2 5 25)  | (2 6 33)  | (2 7 42)  | (2 8 52)  | (2 9 63)  | (2 10 75)  |
| (3 0 6)   | (3 1 6)   | (3 2 6)   | (3 3 11)  | (3 4 17)  | (3 5 24)  | (3 6 32)  | (3 7 41)  | (3 8 51)  | (3 9 62)  | (3 10 74)  |
| (4 0 10)  | (4 1 10)  | (4 2 10)  | (4 3 10)  | (4 4 16)  | (4 5 23)  | (4 6 31)  | (4 7 40)  | (4 8 50)  | (4 9 61)  | (4 10 73)  |
| (5 0 15)  | (5 1 15)  | (5 2 15)  | (5 3 15)  | (5 4 15)  | (5 5 22)  | (5 6 30)  | (5 7 39)  | (5 8 49)  | (5 9 60)  | (5 10 72)  |
| (6 0 21)  | (6 1 21)  | (6 2 21)  | (6 3 21)  | (6 4 21)  | (6 5 21)  | (6 6 29)  | (6 7 38)  | (6 8 48)  | (6 9 59)  | (6 10 71)  |
| (7 0 28)  | (7 1 28)  | (7 2 28)  | (7 3 28)  | (7 4 28)  | (7 5 28)  | (7 6 28)  | (7 7 37)  | (7 8 47)  | (7 9 58)  | (7 10 70)  |
| (8 0 36)  | (8 1 36)  | (8 2 36)  | (8 3 36)  | (8 4 36)  | (8 5 36)  | (8 6 36)  | (8 7 36)  | (8 8 46)  | (8 9 57)  | (8 10 69)  |
| (9 0 45)  | (9 1 45)  | (9 2 45)  | (9 3 45)  | (9 4 45)  | (9 5 45)  | (9 6 45)  | (9 7 45)  | (9 8 45)  | (9 9 56)  | (9 10 68)  |
| (10 0 55) | (10 1 55) | (10 2 55) | (10 3 55) | (10 4 55) | (10 5 55) | (10 6 55) | (10 7 55) | (10 8 55) | (10 9 55) | (10 10 67) |

  Hmmm, something seems to be amiss with the formula in the paper!

  How about restricting x to be less than y?
#+begin_src elisp :results value
  (loop for x from 0 to 10
        collect (loop for y from 0 to 10
                      when (<= x (1- y))
                      collect (list x y (cantor-two-to-one x y))))
#+end_src

#+results:
| (0 1 5)   | (0 2 9)   | (0 3 14)  | (0 4 20)  | (0 5 27)  | (0 6 35)  | (0 7 44)  | (0 8 54)  | (0 9 65)  | (0 10 77) |
| (1 2 8)   | (1 3 13)  | (1 4 19)  | (1 5 26)  | (1 6 34)  | (1 7 43)  | (1 8 53)  | (1 9 64)  | (1 10 76) |           |
| (2 3 12)  | (2 4 18)  | (2 5 25)  | (2 6 33)  | (2 7 42)  | (2 8 52)  | (2 9 63)  | (2 10 75) |           |           |
| (3 4 17)  | (3 5 24)  | (3 6 32)  | (3 7 41)  | (3 8 51)  | (3 9 62)  | (3 10 74) |           |           |           |
| (4 5 23)  | (4 6 31)  | (4 7 40)  | (4 8 50)  | (4 9 61)  | (4 10 73) |           |           |           |           |
| (5 6 30)  | (5 7 39)  | (5 8 49)  | (5 9 60)  | (5 10 72) |           |           |           |           |           |
| (6 7 38)  | (6 8 48)  | (6 9 59)  | (6 10 71) |           |           |           |           |           |           |
| (7 8 47)  | (7 9 58)  | (7 10 70) |           |           |           |           |           |           |           |
| (8 9 57)  | (8 10 69) |           |           |           |           |           |           |           |           |
| (9 10 68) |           |           |           |           |           |           |           |           |           |

   Still not a bijective mapping!

* Verifying a Conjecture

#+begin_src elisp :results code
  (let ((fun-sym 'two-n-choose-n))
    (cons 'defmath (cons fun-sym (cdr (symbol-function fun-sym)))))
#+end_src

#+results:
#+begin_src elisp
(defmath two-n-choose-n
  (n)
  (let
      ((falling 1)
       (rising 1))
    (let*
        ((r 1)
         (--cl-var-- n)
         (next-falling
          (* 2 n))
         (--cl-var--
          (1+ n)))
      (while
          (and
           (<= r --cl-var--)
           (>= next-falling --cl-var--))
        (setq rising
              (* rising r)
              falling
              (* falling next-falling))
        (setq r
              (+ r 1))
        (setq next-falling
              (- next-falling 1)))
      nil)
    (/ falling rising)))
#+end_src

#+results:
: calcFunc-two-n-choose-n

#+begin_src elisp :results code
  (symbol-function 'calcFunc-two-n-choose-n)
#+end_src

#+results:
#+begin_src elisp
(lambda
  (n)
  (let
      ((falling 1)
       (rising 1))
    (let*
        ((r 1)
         (--cl-var-- n)
         (next-falling
          (math-mul 2 n))
         (--cl-var--
          (math-add n 1)))
      (while
          (and
           (not
            (math-lessp --cl-var-- r))
           (not
            (math-lessp next-falling --cl-var--)))
        (setq rising
              (math-mul rising r)
              falling
              (math-mul falling next-falling))
        (setq r
              (math-add r 1))
        (setq next-falling
              (math-sub next-falling 1)))
      nil)
    (math-div falling rising)))
#+end_src

#+begin_src elisp
  (let ((max-specpdl-size most-positive-fixnum))
    (math-format-number (calcFunc-two-n-choose-n 2000)))
#+end_src

#+begin_src elisp :results silent
  (defmath popcount (n)
    (let ((count 0))
      (while (> n 0)
        (setq count (+ count (% n 2))
              n (idiv n 2)))
      count))
#+end_src

#+results:
#+begin_src elisp :results raw
  (calcFunc-popcount 15)
#+end_src

  Note in the =two-n-choose-n= function that the original loop has been changed
  into an equivalent while loop, and much more efficient =degree-2= and
  =population-count= functions were written.
#+begin_src elisp :results silent :tangle test-conjecture.el
  (require 'calc-math)
  (require 'cl)

  (defmath two-n-choose-n (n)
    (let ((falling 1)
          (rising 1)
          (r 1)
          (next-falling (* 2 n)))
      (while (<= r n)
        (setq rising (* rising r)
              falling (* falling next-falling)
              r (+ r 1)
              next-falling (- next-falling 1)))
      (idiv falling rising)))

  (defmath degree-2 (n)
    (let ((count 0))
      (while (and (> n 0) (zerop (% n 2)))
        (setq count (+ 1 count)
              n (idiv n 2)))
      count))

  (defmath population-count (n)
    "Counts the number of 1's in the binary expansion of n."
    (let ((count 0))
      (while (> n 0)
        (setq count (+ count (mod n 2))
              n (idiv n 2)))
      count))

  (defmath test-conjecture (n)
    (= (degree-2 (two-n-choose-n n)) (population-count n)))

  (defun report ()
    (princ (format "Verified up to %s, which took %03.2f seconds.\n"
                   (math-format-number test-n)
                   (- (float-time) start-time))))

  (defun test-conjecture-many ()
    (add-hook 'kill-emacs-hook 'report)
    (setq max-lisp-eval-depth most-positive-fixnum
          max-specpdl-size most-positive-fixnum
          start-time (float-time)
          test-n 1)
    (loop while (calcFunc-test-conjecture test-n)
          do (incf test-n)))
#+end_src


  Note that on Windows (and Linux) ^C (C-c (Control-C)) will interrupt emacs
  running in batch mode and run the =report= function. On Mac the following is
  necessary (note the \lsquo{}&\rsquo after the command-line arguments):
#+begin_src sh
  emacs -batch -l try-a-bunch.el -f try-a-bunch &
#+end_src

  This will echo the job number in square brackets followed by the process ID
  (PID) of the emacs process, e.g.:
: [1] 23979

  You can then interrupt this process with the =KILL= signal sent by the =kill=
  command, which you must invoke with the PID, e.g.:
#+begin_src sh
  kill -SIGKILL 23979
#+end_src

  The long-running code results were lost, unfortunately.

  However the following python equivalent code reported verifying up to 52749
  after running for 24 hours.

#+begin_src python :results output :tangle test_conjecture.py
  import datetime
  import signal

  def handleSigTERM(one, two):
      print('Verified up to ' + str(n) + ' at ' + str(datetime.datetime.now()))

  signal.signal(signal.SIGTERM, handleSigTERM)

  def two_n_choose_n (n):
      falling = 1
      rising = 1
      r = 1
      next_falling = 2*n
      while r <= n:
          rising *= r
          falling *= next_falling
          r += 1
          next_falling -= 1
      return (falling // rising)

  def degree_2 (n):
    degree = 0
    while n != 0 and n % 2 == 0:
        degree += 1
        n /= 2
    return degree

  def pop_count (n):
      count = 0
      while n != 0:
          if n % 2 == 1:
              count += 1
          n /= 2
      return count

  def test_conjecture (n):
      return (pop_count(n) == degree_2(two_n_choose_n(n)))

  n = 1
  while test_conjecture(n):
     n += 1
#+end_src
* Pairing Function Testing

#+begin_src elisp :results silent
  (defmath f (m n)
    (let ((x (+ m n)))
      (+ (/ (* (- x 2) (- x 1)) 2) m)))

  (defun pf2 (m n)
    (calcFunc-f m n))

  (defun pf (list-of-numbers)
    (case (length list-of-numbers)
      (0 1)
      (1 (car list-of-numbers))
      (2 (apply 'pf2 list-of-numbers))
      (t (pf2 (car list-of-numbers) (pf (cdr list-of-numbers))))))
#+end_src

#+begin_src elisp :results code
  (symbol-function 'calcFunc-f)
#+end_src

#+results:
#+begin_src elisp
(lambda
  (m n)
  (let
      ((x
        (math-add m n)))
    (math-add
     (math-div
      (math-mul
       (math-sub x 2)
       (math-sub x 1))
      2)
     m)))
#+end_src

#+begin_src elisp :results raw
  (require 'first-ten-million-primes)

  (setq answer (pf (nreverse (append (subseq first-ten-million-primes 0 100) nil))))
#+end_src

#+begin_src elisp :results code
  (loop for n from 0 to 10
        collect (list n (math-format-number (pf (nreverse (append (subseq first-ten-million-primes 0 n) nil))))))
#+end_src

#+results:
#+begin_src elisp
((0 "1")
 (1 "2")
 (2 "9")
 (3 "83")
 (4 "3923")
 (5 "7732289")
 (6 "29894235511163")
 (7 "446832658398902836599229448")
 (8 "99829712305915296840935119344740080382252134161707864")
 (9 "4982985729540908026817147195509755244144505671625235486046181098527225320317130919491002330077377116440578")
 (10 "12415073390404167698977684514455093076663465117886190365336257576149661612496835342754670171244388700345239543200009550106006020366378428028192867711166720768469089540036085848346025595466716185146510980804603344"))
#+end_src

#+begin_src elisp :results silent
  (defun count-digits (n)
    (+ 1 (floor (log n 10))))

  (defun length-math-format-number (n)
    (setq n (math-format-number n))
    (cond ((integerp n) (count-digits n))
          ((stringp n) (length n))
          (t 0)))
#+end_src

#+begin_src elisp :results code
  (loop with max-specpdl-size = 20000
        with max-lisp-eval-depth = 20000
        for n from 0 to 17
        collect (list n (length-math-format-number (pf (nreverse (append (subseq first-ten-million-primes 0 n) nil))))))
#+end_src

#+results:
#+begin_src elisp
((0 1)
 (1 1)
 (2 1)
 (3 2)
 (4 4)
 (5 7)
 (6 14)
 (7 27)
 (8 53)
 (9 106)
 (10 212)
 (11 422)
 (12 844)
 (13 1687)
 (14 3373)
 (15 6746)
 (16 13492)
 (17 26982))
#+end_src
