-*- mode: org -*-
#+title: Assignment 10
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+startup: entitiespretty showeverything
#+setupfile: theme-bigblow.setup

:HINT:
 Click your mouse on the links below, or with your cursor somewhere in them,
 press the Enter key.

[[elisp:(relocate-file-to-work-folder)][Relocate File to Work Folder]]

[[elisp:(find-file-other-window "generic-instructions.txt")][Read Instructions]]

[[elisp:(browse-url-of-file (org-html-export-to-html))][Export to HTML and Browse]]

[[elisp:(org-clock-report 1)][Insert/Update Clock Summary Report]]
:END:
* General
  The goal of this assignment is to investigate spanning trees of graphs.

  Wikipedia has a [[https://en.wikipedia.org/wiki/Spanning_tree][Spanning Tree]] page with useful information.

  [[https://rickneff.github.io/spanning-tree.png][Example]] spanning tree.

* Algorithm to Find a Spanning Tree
  In 5 pseudocode steps:

  1. Start with the \ldquo{}frontier\rdquo being a list of one --- the first node.
  2. Pick a link connected to a node in the frontier that does not create a
     cycle --- that is, the other (destination) node of the link is not already
     in the frontier.
  3. Add that destination node to the frontier unless already there.
  4. Add the picked link to the spanning-tree.
  5. Repeat steps 2-4 until all nodes are in the frontier.

* Code
  Need:
  1. A graph representation, including a way to represent both nodes and links.
  2. A =get-nodes= function that takes a graph and returns a list of its nodes.
  3. A =get-links= function that takes a graph and returns a list of its links.
  4. A =get-all-adjacencies= function that takes a graph and returns an adjacency
     list of nodes and links.
  5. A =get-node-adjacencies= function that takes a graph and a node and returns a
     list of adjacent nodes to that node.

* Data
  Need:

  Several different types of graphs (including ladder graphs) to test the
  algorithm with.

* TODO My Report on What I Learned
  A large part of learning is to reflect and report on what you learned.

  Something should be in your report addressing each of the
  =assertions-about-report= below.

  Evidence should also be there that you took steps (which ones?) to eliminate
  MIs (see =assertions-about-MIs= below).

** How I had fun
   Graphs are always a good time, and this was no different.
** How I collaborated
   I worked with my study group to achieve these results.
** What new I learned
   I learned how to use the get-nodes function better.
** What meaningful I achieved
   I learned to create graphs in lisp a lot better.
** Etc.
* TODO What Is True?
   This is a tool that allows you to assess yourself on how you did
   with this assignment. Check a box (using , ,) if warranted.

   What is true of my experience in general?
#+name: assertions-in-general
  - [X] I had fun.
  - [X] I collaborated with one or more classmates.
  - [X] I learned something new.
  - [X] I achieved something meaningful, or something I can build upon at a
        later time.

   What is true of my report on what I learned?
#+name: assertions-about-report
  - [X] I wrote a sufficient number of well-written sentences.
  - [X] I reported what I thought about while doing the problems.
  - [X] I reported on any connections I found between these problems and
        something I already know.
  - [X] I reported who were and what contribution each of my collaborators made.

   What is true of the \ldquo{}mechanical infelicities\rdquo (misspelled words, grammatical
   errors, punctuation errors) in my report of what I learned?
#+name: assertions-about-MIs
  - [X] There are fewer than four.
  - [X] There are fewer than three.
  - [X] There are fewer than two.
  - [X] There are none.

#+name: assertions-about-code
  - [X] I used the supplied or created my own elisp code to represent a graph as
        a set of nodes and a set of links.
  - [X] I wrote an elisp function called =get-nodes= that takes a graph and
        returns a list of its nodes.
  - [X] I wrote an elisp function called =get-links= that takes a graph and
        returns a list of its links.
  - [X] I wrote an elisp function called =get-all-adjacencies= that takes a graph
        and returns an adjacency list of nodes and links.
  - [ ] I wrote an elisp function called =get-node-adjacencies= that takes a graph
        and a node and returns a list of adjacent nodes to that node.
  - [ ] I correctly implemented the =spanning-tree= algorithm.

#+name: assertions-about-data
  - [X] I created a ladder graph with 2 rungs and tested my code on it.
  - [X] I created a ladder graph with 3 rungs and tested my code on it.
  - [X] I created a ladder graph with 4 rungs and tested my code on it.
  - [ ] I created a ladder graph with 5 rungs and tested my code on it.
  - [X] I created a graph from the [[https://rickneff.github.io/spanning-tree.png][Example]] and tested my code on it.
  - [X] I created a graph of my own devising and tested my code on it.

#+begin_src elisp
  (calculate-score
   (quote
    ((in-general 2 2 2 2)
     (about-report 5 5 5 5)
     (about-MIs 2 2 2 2)
     (about-code 5 5 5 5 5 5)
     (about-data 5 5 5 5 7 7))))
#+end_src
